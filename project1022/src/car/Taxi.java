/*9. 택시를 정의한다*/
package car;

public class Taxi extends Car{
	/* 이미 Car를 상속받았으므로, 여기서도 마찬가지로 택시만이 갖는 특징만 추가하면 된다
	코드량이 현저히 줄고, 중복작성 하지 않아도 되므로 유지보수하기에 좋다...
	oop언어의 목적은 바로 상속이다 */

	/*
	현재 택시 클래스에는 생성자가 있을까? 디폴트 생성자가 컴파일러에 의해 관여된다.. 왜? 적어도 에러는 나지 않아야 하므로..
	눈에 보이지는 않지만, 컴파일러에 의해 디폴트 생성자가 아래와 같이 아무것도 없는 로직상태로 존재하게 된다
	그래야 new Taxi() 할때 에러가 안난다
	근데 다른 문제가 발생한다.. 택시가 초기화하기 보다 앞서서 Car가 먼저 초기화가 되어야 된다.. 부모가 먼저 존재해야하므로
	그래서 sun 사에서는 눈에 보이지는 않지만, 자식의 디폴트 생성자에 보이지 않는 생성자 호출을 살짝 넣어둔다.. 아래처럼
	public Taxi(){
		super();	//이 생성자 호출이 숨어있다!
		super는 부모클래스를 의미하고 super()는 부모의 생성자를 의미한다 (js와 동일)

		sun사에 의해 디폴트 생성자가 부모의 생성자를 호출하는지 증명해보자
		부모의 생성자에 무언가 동작여부를 확인할 수 있는 코드를 넣자
		근데, 부모인 Car에서 디폴트생성자가 아닌, 매개변수 있는 생성자만 둘 경우 조심해야한다
		Taxi클래스의 디폴트생성자에서는 무조건 super()가 들어있으므로, 매개변수 없는 생성자인 Car()를 호출하고 있는 것과 같다
		따라서 현재 Car에는 Car() 생성자 대신에 Car(String brand)만 존재하므로, 생성자 호출시 에러가 난다
		해결책은 js시간에 공부했다
		해결책) 현재 디폴트 생성자는 우리에게 아무런 도움을 주지 못하므로 이제 개발자가 주도해서 원하는 생성자 호출을 직접 해야한다
		한마디로 디폴트 생성자에 의존하면 안된다.. 즉 방치하지 말자 생성자 정의하자
	}
	*/

	//부모의 매개변수 있는 생성자를 직접 호출해주기 위해, 개발자가 생성자를 정의하고 있다
	/*
	public Taxi(){
		super("Benz");	//매개변수 있는 생성자를 호출한다. 이렇게하면 존재하는 생성자를 제대로 호출하는 것이므로 더이상 에러안난다
	}
	*/ 주석추가!!!!!!!!!!!!!!!!!!!!
	//위와같이 개발자가 직접 알맞은 생성자를 정의하는 방법을 추천하지만, 혹시 이런 경우도 있다
	//부모클래스에 생성자를 여러개 정의한다... 그러니까 매개변수 있는것, 없는것, 온갖 종류로 다 정의해놓는다... 오버로딩


	//택시만이 갖는 특징
	public void pass(){
		System.out.println("승객을 태웁니다");
	}
}
